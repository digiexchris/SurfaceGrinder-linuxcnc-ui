O<zmove_repeattype1> sub
#4 = [#<_hal[grinder.z_min]>] 
#5 = [#<_hal[grinder.z_max]>] 
#6 = [#<_hal[grinder.z_crossfeed]>] 
#7 = [#<_hal[grinder.z_speed]>]
#8 = [#<_hal[grinder.z_direction]>]
#11 = #<_hal[grinder.enable_z]>
#12 = #<_hal[grinder.enable_x]>

; #<_x> X
; #<_y> Y
; #<_z> Z

o100 IF [#11 EQ 1]

   o110 IF [[#8 EQ 0] AND [#<_ignore_custom_mcode> NE 1]]
      M100 P1 (Set direction towards max, always go max. Though, this routine ignores this. It's just here for if the repeat type switches back to 0)
   o110 ENDIF

   o120 IF [#<_z> GE #<_hal[grinder.z_max]>]
      (print, !!!!!!! RETURNING !!!! #<_z> GE #<_hal[grinder.z_max]>)
      G0 Z[#<_hal[grinder.z_min]>] ;F[#7]
      o<YDownfeed> call
   o120 ELSE
      (print, o120 else)
      #9 = [#<_z> + #<_hal[grinder.z_crossfeed]>]
      o121 IF [#9 GT #<_hal[grinder.z_max]>]
         (print, o121 IF)
         G1 Z[#<_hal[grinder.z_max]>] F[#<_hal[grinder.z_speed]>]
      o121 ELSE
         (print, o121 ELSE)
         G1 Z[#9] F[#<_hal[grinder.z_speed]>]
      o121 ENDIF

      o122 IF [#<_z> GE #<_hal[grinder.z_max]>]
         (print, Running Disable)
         #<_z_cycles> = [#<_z_cycles> + 1]
         o<Disable_At_Z_Limit> call
      o122 ENDIF
   o120 ENDIF
o100 ELSE
   o130  IF [#12 EQ 0]
   (print, o130 waiting)
      G04 P0.5 (Just so the interpreter isn't spinning, because both X and Z are off)
   o130  ENDIF
o100 ENDIF

(print, done O<zmove_repeattype1>)

O<zmove_repeattype1> endsub
